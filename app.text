from flask import Flask, request, redirect, url_for, render_template, send_from_directory
import cv2
import numpy as np
import os

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'static/uploads/'
app.config['ALLOWED_EXTENSIONS'] = {'jpg', 'jpeg', 'png'}

# Helper function to check allowed file extensions
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# Home route
@app.route('/')
def index():
    return render_template('index.html')

# Upload route
@app.route('/', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    if file and allowed_file(file.filename):
        filename = 'uploaded_image.jpg'
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # Process image and get results
        result_image_path, counts = process_image(filepath, filename)
        
        # Determine the section with the highest count
        max_section = max(counts, key=counts.get)
        max_count = counts[max_section]
        
        return render_template('index.html', result_image=url_for('uploaded_file', filename='result_' + filename), max_section=max_section, max_count=max_count)

# Route to serve uploaded image
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

def process_image(filepath, filename):
    img = cv2.imread(filepath)
    height, width, _ = img.shape
    boundaries = [height * i // 4 for i in range(1, 4)]

    for boundary in boundaries:
        cv2.line(img, (0, boundary), (width, boundary), (0, 0, 255), 1)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    lower_white = np.array([0, 0, 175])
    upper_white = np.array([270, 50, 255])

    mask_white = cv2.inRange(hsv, lower_white, upper_white)
    kernel = np.ones((2, 2), np.uint8)
    mask_white = cv2.morphologyEx(mask_white, cv2.MORPH_OPEN, kernel)
    mask_white = cv2.morphologyEx(mask_white, cv2.MORPH_CLOSE, kernel)

    contours, _ = cv2.findContours(mask_white, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    min_area = 20
    counts = {"Top": 0, "Middle": 0, "Bottom": 0, "Footer": 0}

    for cnt in contours:
        if cv2.contourArea(cnt) > min_area:
            M = cv2.moments(cnt)
            cX, cY = int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"])
            result = ("Top" if cY < boundaries[0] else
                      "Middle" if cY < boundaries[1] else
                      "Bottom" if cY < boundaries[2] else
                      "Footer")

            counts[result] += 1
            cv2.putText(img, result, (cX, cY), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            cv2.drawContours(img, [cnt], -1, (0, 255, 0), 2)

    result_filename = 'result_' + filename
    result_image_path = os.path.join(app.config['UPLOAD_FOLDER'], result_filename)
    cv2.imwrite(result_image_path, img)
    
    return result_image_path, counts


if __name__ == '__main__':
    # Ensure the upload folder exists
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    
    app.run(debug=True)
